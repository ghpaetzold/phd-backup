import os
from lexenstein.evaluators import *

def getSelectors(generator):
	result = {}
	files = os.listdir('../../substitutions/'+generator+'/')
	for file in files:
		if file != 'substitutions.txt':
			bulk = file[0:len(file)-4].strip().split('_')[1].strip()
			if bulk in result:
				result[bulk].add(file)
			else:
				result[bulk] = set([file])
	return result






namem = {}
namem['boundaryCV'] = 'Boundary (CV)'
namem['boundaryUnsupervisedCV'] = 'Boundary Unsupervised (CV)'
namem['boundaryCVnotgt1st'] = 'Boundary (CV) (No-Tgt-1st)'
namem['svmrank'] = 'SVM Rank'
namem['svmranknotgt1st'] = 'SVM Rank (No-Tgt-1st)'
namem['vectorsim'] = 'Embed. Sim.'
namem['subimdb10'] = 'N-Gram (1, 0)'
namem['subimdb01'] = 'N-Gram (0, 1)'
namem['subimdb11'] = 'N-Gram (1, 1)'
namem['subimdb20'] = 'N-Gram (2, 0)'
namem['subimdb02'] = 'N-Gram (0, 2)'
namem['subimdb21'] = 'N-Gram (2, 1)'
namem['subimdb12'] = 'N-Gram (1, 2)'
namem['subimdb22'] = 'N-Gram (2, 2)'
namem['translationprob'] = 'Translation Prob.'
namem['postagprob'] = 'POS Prob.'
namem['void'] = 'No Selection'

methods = ['all', 'kauchak', 'paetzold', 'wordnet']

lexf = open('../../corpora/lexmturk_gold_test.txt')
lex = []
for line in lexf:
	data = line.strip().split('\t')
	target = data[1].strip()
	subs = set([cand.split(':')[1].strip() for cand in data[3:len(data)]])
	lex.append((target, subs))
lexf.close()

gold_counts = []
gc = open('../../corpora/lexmturk_gold_counts_test.txt')
c = 0
for line in gc:
	c += 1
	gold_counts.append(int(line.strip()))
gc.close()
#print(str(c))


bestssf = {}
for index in range(0, len(methods)):
	selectors = getSelectors(methods[index])
	maxims = set(selectors.keys()).difference(set(['unsupervised']))

	method = methods[index]
	bestssf[method] = set([])
	myt = ''
	headers = ['Selector', 'Potential', 'Precision', 'Recall', 'F-Measure']
	myt += r'\begin{table}[htpb]'+'\n'
	myt += r'\caption{Evaluation results for SS approaches with respect to substitutions generated by the '+method[0].upper()+method[1:len(method)]+' Generator}\n'
	myt += r'\centering'+'\n'
	myt += r'\label{table:benchss'+str(index)+'}\n'
	myt += r'\begin{tabular}{l|cccc}'+'\n'
	myt += r'Selector & Potential & Precision & Recall & F-Measure \\'+ '\n'
	myt += r'\hline'+'\n'

	se = SelectorEvaluator()
	for selector in sorted(selectors.keys()):
		if selector in maxims:
			#print(str(selector))
			maxfmean = -1
			maxpot = -1
			maxprec = -1
			maxrec = -1
			maxfile = ''
			for file in selectors[selector]:
				#print(file)

				#Generate sele_d (selected data):
				sele_d = []
				sele_p = '../../substitutions/'+method+'/'+file
	
				index = -1
				sele_f = open(sele_p)
				c = -1
				for line in sele_f:
					c += 1
					data = line.strip().split('\t')
					data = data[3:len(data)]
					data = [candidate.strip().split(':')[1].strip() for candidate in data]
					try:
						counts = gold_counts[c]
					except Exception:
						print('Required: ' + str(c))
						print('Has: ' + str(len(gold_counts)))
					data = data[0:counts]
					
					#if counts!=len(set(data)):
					#	print('Asked: ' + str(counts) + ', gotten: ' + str(len(set(data))))

					if len(data)>0:
						sele_d.append(set(data))
					else:
						sele_d.append(set([]))
				sele_f.close()
				
				pot, prec, rec, fmean = se.evaluateSelector('../../corpora/lexmturk_gold_test.txt', sele_d)
				#if selector=='void':
				#	print('VOID!')
				#	print('Results: ' + str(pot) + ' ' + str(prec) + ' ' + str(rec) + ' ' + str(fmean))
				if fmean>maxfmean:
					maxfmean = fmean
					maxpot = pot
					maxprec = prec
					maxrec = rec
					maxfile = file
			components = [maxpot, maxprec, maxrec, maxfmean]
			#print('For: ' + selector)
			#print('Max file: ' + maxfile)
			bestssf[method].add(maxfile.strip())
			if selector in namem.keys():
				myt += namem[selector] + ' '
				for comp in components:
					cstr = "%.3f" % comp
					if len(cstr)==1:
						cstr += '.000'
					elif len(cstr)==3:
						cstr += '00'
					elif len(cstr)==4:
						cstr += '0'
					myt += r'& $' + cstr + r'$ '
				myt += r'\\' + '\n'
		else:
			for file in selectors[selector]:
				bestssf[method].add(file.strip())
				sele_d = []
				sele_p = '../../substitutions/'+method+'/'+file
				sele_f = open(sele_p)
				for line in sele_f:
					data = line.strip().split('\t')
					data = data[3:len(data)]
					data = [candidate.strip().split(':')[1].strip() for candidate in data]

					if len(data)>0:
						sele_d.append(set(data))
					else:
						sele_d.append(set([]))
				sele_f.close()

				pot, prec, rec, fmean = se.evaluateSelector('../../corpora/lexmturk_gold_test.txt', sele_d)
				components = [pot, prec, rec, fmean]
				identifier = file[0:len(file)-4].strip().split('_')

				if len(identifier)>2:
					identifier = identifier[2].strip()
					if identifier in namem.keys():
						myt += namem[identifier] + ' '
						for comp in components:
							cstr = "%.3f" % comp
							if len(cstr)==1:
								cstr += '.000'
							elif len(cstr)==3:
								cstr += '00'
							elif len(cstr)==4:
								cstr += '0'
							myt += r'& $' + cstr + r'$ '
						myt += r'\\' + '\n'				
	
	orig_p = '../../substitutions/'+method+'/substitutions.txt'
	orig_s = {}
	orig_d = []
	
	orig_f = open(orig_p)
	for line in orig_f:
		data = line.strip().split('\t')
		target = data[0].strip()
		if len(data)>1:
			subs = set(data[1].split('|||'))
			orig_s[target] = subs
	orig_f.close()
	
	#Generate orig_d (original data):
	for l in lex:
		target = l[0]
		if target in orig_s.keys():
			orig_d.append(orig_s[target])		
		else:
			orig_d.append(set([]))

	#Get statistics without selection:
	ge = GeneratorEvaluator()
	pot, prec, rec, fmean = ge.evaluateGenerator('../../corpora/lexmturk_gold_test.txt', orig_s)
	components = [pot, prec, rec, fmean]
	myt += r'\hline' + '\nNo Selection '
	for comp in components:
		cstr = "%.3f" % comp
		if len(cstr)==1:
			cstr += '.000'
		elif len(cstr)==3:
			cstr += '00'
		elif len(cstr)==4:
			cstr += '0'
		myt += r'& $' + cstr + r'$ '
	myt += r'\\' + '\n'
	myt += r'\end{tabular}'+'\n'
	myt += r'\end{table}'+'\n'
	print(myt)

#Write file with best settings:
o = open('best_ss.txt', 'w')
for method in bestssf.keys():
	newline = method + '\t'
	for file in bestssf[method]:
		newline += file + '\t'
	o.write(newline.strip() + '\n')
o.close()
