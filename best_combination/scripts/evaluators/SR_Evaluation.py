from tabulate import tabulate
import os
from lexenstein.evaluators import *

generators = os.listdir('../../substitutions/')
selectors = ['void', 'boundaryCV', 'svmrank']
methods = set(os.listdir('../../rankings/'))

namem = {}
namem['void'] = 'No Selection'
namem['boundaryCV'] = 'BoundaryCV'
namem['svmrank'] = 'SVM Rank'

results = {}
for generator in generators:
	results[generator] = {}
	for selector in selectors:
		results[generator][selector] = {}
		for method in methods:
			results[generator][selector][method] = (-1.0, -1.0, -1.0)

pe = PipelineEvaluator()
maxp = -1
maxpd = None
maxa = -1
maxad = None
for method in methods:
		files = os.listdir('../../rankings/'+method+'/')

		for file in files:
			filed = file.strip().split('.')[0].strip().split('_')
			generator = filed[1].strip()
			selector = filed[2].strip()

			if generator in generators and selector in selectors:
				subs = []
				f = open('../../rankings/'+method+'/'+file)
				for line in f:
					subs.append(line.strip().split('\t'))
				f.close()
				
				precision, accuracy, changed = pe.evaluatePipeline('../../corpora/lexmturk_all.txt', subs)
				if precision>maxp:
					maxp = precision
					maxpd = (generator, selector, method)
				if accuracy>maxa:
					maxa = accuracy
					maxad = (generator, selector, method)	
				
				if precision>results[generator][selector][method][0]:
					results[generator][selector][method] = (precision, accuracy, changed)

print('Max precision: ' + str(maxp) + ', of config: ' + str(maxpd))
print('Max accuracy: ' + str(maxa) + ', of config: ' + str(maxad))

index = -1
for generator in results.keys():
	genprefix = generator[0].upper() + generator[1:len(generator)]
	for selector in results[generator].keys():
		index += 1
		myt = ''
		myt += r'\begin{table}[htpb]'+'\n'
		myt += r'\caption{Evaluation results for SR approaches with respect to substitutions generated by '
		if generator == 'all':
			myt += 'all generators combined, as selected by the '
		else:
			myt += 'the ' + genprefix + ' Generator, as selected by the '
		myt += namem[selector] + r' Selector}' + '\n'		
		myt += r'\centering'+'\n'
		myt += r'\label{table:benchsr'+str(index)+'}\n'
		myt += r'\begin{tabular}{l|ccc}'+'\n'
		myt += r'Ranker & Precision & Accuracy & Changed Proportion \\'+ '\n'
		myt += r'\hline'+'\n'
		for method in sorted(results[generator][selector]):
			methodp = method[0].upper() + method[1:len(method)]
			myt += methodp + ' '
			data = results[generator][selector][method]
			for comp in data:
				cstr = "%.3f" % comp
				if len(cstr)==1:
					cstr += '.000'
				elif len(cstr)==3:
					cstr += '00'
				elif len(cstr)==4:
					cstr += '0'
				myt += r'& $' + cstr + r'$ '
			myt += r'\\' + '\n'
		myt += r'\end{tabular}'+'\n'
		myt += r'\end{table}'+'\n'
