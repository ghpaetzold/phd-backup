from tabulate import tabulate
import os
from lexenstein.evaluators import *

#Generators:
generators = os.listdir('../../substitutions/')
#generators = ['glavas']
generators = ['paetzold']
#generators = ['kauchak']
#generators = ['biran']

#Selectors:
selectors = ['svmrank', 'GrammaticalitySGD', 'boundaryUnsupervisedCV', 'boundaryUnsupervised', 'void']
#selectors = ['biran']
#selectors = ['void']

#Rankers:
methods = set(os.listdir('../../rankings/'))

#Selector names:
namem = {}
namem['svmrank'] = 'SVM Rank'
namem['Grammaticality'] = 'Grammaticality (DT)'
namem['GrammaticalitySGD'] = 'Grammaticality (SGD)'
namem['boundaryUnsupervisedCV'] = 'Boundary (Unsupervised) (CV)'
namem['boundaryUnsupervised'] = 'Boundary (Unsupervised)'
namem['void'] = 'No Selection'
namem['biran'] = 'Biran'

results = {}
for generator in generators:
	results[generator] = {}
	for selector in selectors:
		results[generator][selector] = {}
		for method in methods:
			results[generator][selector][method] = (-1.0, -1.0, -1.0)

pe = PipelineEvaluator()
for method in methods:
		#print(method)
		files = os.listdir('../../rankings/'+method+'/')

		for file in files:
			filed = file.strip().split('.')[0].strip().split('_')
			generator = filed[1].strip()
			selector = filed[2].strip()

			subs = []
			f = open('../../rankings/'+method+'/'+file)
			for line in f:
				subs.append(line.strip().split('\t'))
			f.close()
			
			precision, accuracy, changed = pe.evaluatePipeline('../../corpora/paetzold_nns_dataset.txt', subs)
			
			try:
				if precision>results[generator][selector][method][0]:
					results[generator][selector][method] = (precision, accuracy, changed)
			except Exception:
				pass

index = -1
for generator in results.keys():
	genprefix = generator[0].upper() + generator[1:len(generator)]
	for selector in results[generator].keys():
		index += 1
		myt = ''
		myt += r'\begin{table}[htpb]'+'\n'
		myt += r'\caption{Evaluation results for SR approaches with respect to substitutions generated by '
		if generator == 'all':
			myt += 'all generators combined, as selected by the '
		else:
			myt += 'the ' + genprefix + ' Generator, as selected by the '
		myt += namem[selector] + r' Selector}' + '\n'		
		myt += r'\centering'+'\n'
		myt += r'\label{table:benchsr'+str(index)+'}\n'
		myt += r'\begin{tabular}{l|ccc}'+'\n'
		myt += r'Ranker & Precision & Accuracy & Changed Proportion \\'+ '\n'
		myt += r'\hline'+'\n'
		for method in sorted(results[generator][selector]):
			methodp = method[0].upper() + method[1:len(method)]
			myt += methodp + ' '
			data = results[generator][selector][method]
			for comp in data:
				cstr = "%.3f" % comp
				if len(cstr)==1:
					cstr += '.000'
				elif len(cstr)==3:
					cstr += '00'
				elif len(cstr)==4:
					cstr += '0'
				myt += r'& $' + cstr + r'$ '
			myt += r'\\' + '\n'
		myt += r'\end{tabular}'+'\n'
		myt += r'\end{table}'+'\n'
		print(myt)
